name: Clojure CI

on:
  push:
    branches: [ master ]

jobs:

  jvm:
    # ubuntu 18.04 comes with lein + java8 installed
    runs-on: ubuntu-18.04
    steps:
      - name: Git checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
          submodules: 'true'
 
      - name: Cache deps
        uses: actions/cache@v1
        id: cache-deps
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('project.clj') }}
          restore-keys: |
                ${{ runner.os }}-maven-

      - name: Fetch deps
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          lein deps

      - name: Run tests
        run: |
          true

  linux:
    needs: [jvm]
    runs-on: ubuntu-18.04
    steps:
      - name: Git checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
          submodules: 'true'

      - name: Cache deps
        uses: actions/cache@v1
        id: cache-deps
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('project.clj') }}
          restore-keys: |
                ${{ runner.os }}-maven-

      - name: Cache GraalVM
        uses: actions/cache@v1
        id: cache-graalvm
        with:
          path: ~/graalvm-ce-java8-20.0.0
          key: ${{ runner.os }}-graalvm-20.0.0
          restore-keys: |
                ${{ runner.os }}-graalvm-20.0.0
                
      - name: pcp version
        id: pcp-version
        run: |
          PCP_VERSION=$(cat resources/PCP_VERSION)
          echo "##[set-output name=version;]${PCP_VERSION}"

      - name: Download GraalVM
        run: |
          cd ~
          if ! [ -d graalvm-ce-java8-20.0.0 ]; then
            curl -O -sL https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-20.0.0/graalvm-ce-java8-linux-amd64-20.0.0.tar.gz
            tar xzf graalvm-ce-java8-linux-amd64-20.0.0.tar.gz
          fi 

      - name: Build Linux native image
        env:
          _JAVA_OPTIONS: -Xmx5g
        run: |
          export GRAALVM_HOME=~/graalvm-ce-java8-20.0.0
          export JAVA_HOME=~/graalvm-ce-java8-20.0.0/Contents/Home
          export PATH=$JAVA_HOME/bin:$PATH
          export PATH=$GRAALVM_HOME/bin:$PATH
          java -version
          gu install native-image
          bash build.sh
          cp pcp.service target/pcp.service 

      - uses: actions/upload-artifact@v1
        with:
          path: target
          name: pcp-v${{ steps.pcp-version.outputs.version }}-linux-amd64

  mac:
    needs: [jvm]
    runs-on: macOS-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
          submodules: 'true'

      - name: Cache GraalVM
        uses: actions/cache@v1
        id: cache-graalvm
        with:
          path: ~/graalvm-ce-java8-20.0.0
          key: ${{ runner.os }}-graalvm-20.0.0
          restore-keys: |
                ${{ runner.os }}-graalvm-20.0.0

      - name: Download GraalVM
        run: |
          cd ~
          if ! [ -d graalvm-ce-java8-20.0.0 ]; then
            curl -O -sL https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-20.0.0/graalvm-ce-java8-darwin-amd64-20.0.0.tar.gz
            tar xzf graalvm-ce-java8-darwin-amd64-20.0.0.tar.gz
          fi

      - name: pcp version
        id: pcp-version
        run: |
            PCP_VERSION=$(cat resources/PCP_VERSION)
            echo "##[set-output name=version;]${PCP_VERSION}"
  
      - name: Build Mac native image
        env:
          _JAVA_OPTIONS: -Xmx5g
        run: |
          export GRAALVM_HOME=~/graalvm-ce-java8-20.0.0
          export JAVA_HOME=~/graalvm-ce-java8-20.0.0/Contents/Home
          export PATH=$JAVA_HOME/bin:$PATH
          export PATH=$GRAALVM_HOME/bin:$PATH
          java -version
          brew install leiningen
          gu install native-image
          bash build.sh
          cp pcp.service target/pcp.service 

      - uses: actions/upload-artifact@v1
        with:
          path: target
          name: pcp-v${{ steps.pcp-version.outputs.version }}-macos-amd64
